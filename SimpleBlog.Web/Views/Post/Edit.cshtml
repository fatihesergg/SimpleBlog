@{
    ViewData["Title"] = "Add new post";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Post
<div id="create_post" class="container bg-dark">
    <form id="create_post_form" asp-action="Create" method="post">
        <input id="post_id" type="hidden" asp-for=@Model.Id></input>
        <div class="mb-3 shadow">
            <label asp-for="Title" class="form-label">Title</label>
            <input id="post_title" type="text" asp-for="Title" class="form-control shadow" />
        </div>
        <div class="mb-3">
            <label class="form-label">Category</label>
            <input type="text" class="form-control shadow" id="category_input" />
            <div class="mb-3 container" id="categories"></div>
        </div>
        <label class="form-label">Content</label>
        <div id="editor" class="mb-3 shadow">
        </div>
        <input type="hidden" id="categoriesInput" name="CategoriesJson" />
        <input type="hidden" id="post_content" asp-for="Content" name="name" />
        <button class="btn btn-outline-light">Add New Post</button>
    </form>
</div>

@section Scripts {
    <link rel="stylesheet" href="/richtexteditor/rte_theme_default.css" />
    <script type="text/javascript" src="/richtexteditor/rte.js"></script>
    <script type="text/javascript" src='/richtexteditor/plugins/all_plugins.js'></script>

    <script>
        var isInserted = false;

        document.addEventListener('DOMContentLoaded', function () {
            var editor = new RichTextEditor("#editor");
            editor.insertHTML(editor.htmlDecode('@Model.Content'));
            editor.attachEvent('change', handleEditorChange);



            var categoryArr = [];
            var categoryInput = document.getElementById('category_input');
            var categoriesContainer = document.getElementById('categories');
            var categoriesInputHidden = document.getElementById('categoriesInput');
            var form = document.getElementById('create_post_form');
            const title = document.getElementById('post_title');
            const content = document.getElementById('post_content');
            const id = document.getElementById('post_id');

            categoryInput.addEventListener('input', extractCategory);
            form.addEventListener('submit', postForm);

            function handleEditorChange() {
                content.value = editor.getHTMLCode();
            }


            function postForm(event) {
                event.preventDefault();

                const body = JSON.stringify({
                    Id: id.value,
                    Title: title.value,
                    Content: content.value,
                    Categories: categoryArr,
                });

                $.ajax({
                    type: 'POST',
                    url: '/Post/Edit',
                    contentType: 'application/json',
                    data: body,
                });


            }

            function extractCategory(event) {
                const value = event.target.value[event.target.value.length - 1];
                if (value === " ") {
                    if (event.target.value.length > 1) {
                        categoryInput.value.trim();
                        addCategory(categoryInput.value);

                    }
                    categoryInput.value = '';
                }
            }

            var addCategory = function (category_name) {
                categoryArr.push({ 'Name': category_name });
                let last = categoryArr[categoryArr.length - 1];
                renderCategory(last);


            }

            var removeCategory = function (category_element) {
                const categoryName = category_element.target.innerText.replace('#', '');
                const index = categoryArr.indexOf(categoryName);
                delete categoryArr[index];
                categoriesContainer.removeChild(category_element.target.parentNode);

            }

            function renderCategory(category) {
                let categoryElement = document.createElement('div');
                categoryElement.className = 'category-' + categoryArr.length;
                categoryElement.innerHTML = `<button type="button" class="btn btn-outline-light">#${category.Name}</button>`;
                categoryElement.addEventListener('click', removeCategory);
                categoriesContainer.appendChild(categoryElement);
            }

            if (!isInserted) {

        @foreach (var _category in Model.Categories)
        {
            @:addCategory('@_category.Name');

        }
                    isInserted = true;
            }

        });
    </script>



}